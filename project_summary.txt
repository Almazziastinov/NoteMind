# Сводка по проекту Note Bot

## 1. Обзор проекта

Этот проект представляет собой многопользовательского Telegram-бота для управления заметками. Бот использует большую языковую модель (LLM) для понимания команд на естественном языке и для автоматического присвоения тегов создаваемым заметкам.

## 2. Ключевые технологии

- **Язык:** Python 3.11
- **Telegram Bot API:** `python-telegram-bot`
- **База данных:** PostgreSQL (для хранения заметок каждого пользователя отдельно)
- **Взаимодействие с AI:** `langchain`, `langgraph`, `openai` (GPT-4)
- **Контейнеризация:** Docker

## 3. Реализованные функции

- **Управление заметками:**
  - Добавление, просмотр, редактирование и удаление заметок.
  - Поиск заметок по автоматически сгенерированным тегам.
- **AI-агент:**
  - Понимает команды на естественном языке (например, "добавь заметку о встрече завтра").
  - Автоматически анализирует текст заметки и присваивает ей релевантные теги.
- **Многопользовательская поддержка:**
  - Каждый пользователь Telegram имеет свой собственный, изолированный набор заметок.
  - Данные хранятся в базе данных PostgreSQL, где каждая заметка привязана к уникальному ID пользователя.
- **Два режима развертывания:**
  - **Webhook (Web Service):** Рекомендуемый для продакшена. Бот работает как веб-сервис, принимая обновления от Telegram по HTTP.
  - **Polling (Background Worker):** Режим постоянного опроса. Подходит для локальной разработки и отладки.
  - Режим выбирается с помощью переменной окружения `BOT_MODE`.
- **Помощь для пользователя:**
  - Команда `/start` выводит приветственное сообщение и инструкцию по использованию бота.
  - Бот отвечает на вопросы "что ты умеешь?" или "помощь", отправляя ту же инструкцию.
- **Система отчетов (репортов):**
  - Пользователи могут отправить отзыв, предложение или сообщение об ошибке (например, "отправить репорт: бот неверно распознал команду").
  - Эти сообщения автоматически пересылаются в личные сообщения администратору (указывается через `ADMIN_TELEGRAM_ID`).

## 4. Настройка и развертывание

Для развертывания проекта необходимо установить следующие переменные окружения:

### Основные (для обоих режимов):
- `OPENAI_API_KEY`: Ключ для OpenAI.
- `LANGCHAIN_API_KEY`, `LANGCHAIN_ENDPOINT`, `LANGCHAIN_PROJECT`, `LANGCHAIN_TRACING_V2`: Для отладки через LangSmith.
- `DB_NAME`, `DB_USER`, `DB_PASSWORD`, `DB_HOST`, `DB_PORT`: Данные для подключения к базе данных PostgreSQL.
- `TELEGRAM_TOKEN`: Токен вашего Telegram-бота.
- `ADMIN_TELEGRAM_ID`: Числовой ID администратора для получения репортов.

### Для режима "Web Service":
- `BOT_MODE`: `WEBHOOK`
- `WEBHOOK_URL`: Публичный URL вашего сервиса (например, `https://your-app.onrender.com`).
- `PORT`: Порт, который слушает приложение (например, `10000`).

### Для режима "Background Worker":
- `BOT_MODE`: `POLLING` (или не указывать).

## 5. Текущий статус (На чем мы остановились)

- Бот полностью функционален и развернут на платформе Render.
- Мы реализовали все вышеперечисленные функции, включая помощь для пользователей и систему репортов.
- Мы столкнулись с проблемой при использовании форматирования `MarkdownV2` в Telegram. Из-за того, что AI не всегда корректно экранировал специальные символы, это приводило к сбоям.
- **Принято решение:** В пользу стабильности мы отказались от `MarkdownV2`. Сейчас бот отправляет все сообщения (ответы AI, инструкции) в виде простого текста. Это гарантирует его бесперебойную работу.

Проект находится в стабильном, рабочем состоянии.